[
    {
        "id": "e4ab771e79673c52",
        "type": "tab",
        "label": "check urls",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0f423dc7fc354cb4",
        "type": "tab",
        "label": "updateScripturePlusID",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8c069999c82e3d42",
        "type": "tab",
        "label": "Check html",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6a5cdb3d473bbc8d",
        "type": "tab",
        "label": "Footnotes",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ded3b8aa0b8e9043",
        "type": "tab",
        "label": "Check SEO",
        "disabled": false,
        "info": ""
    },
    {
        "id": "5c487a685c5333a0",
        "type": "http proxy",
        "name": "",
        "url": "https://api.scripturecentral.org/proxy/api/",
        "noproxy": []
    },
    {
        "id": "4b529f5deaae6a4f",
        "type": "http proxy",
        "name": "",
        "url": "api.scripturecentral.org/proxy/api/evidences",
        "noproxy": []
    },
    {
        "id": "367129b6a75dfe13",
        "type": "gauth",
        "name": "node-red@soy-enterprise-402215.iam.gserviceaccount.com"
    },
    {
        "id": "0f9e4add1d4cec9d",
        "type": "gauth",
        "name": "nodered-consistency@scripturecentral-dev.iam.gserviceaccount.com"
    },
    {
        "id": "04223cee7f30d02a",
        "type": "function",
        "z": "e4ab771e79673c52",
        "name": "result",
        "func": "\nmsg.payload = msg.statusCode\nmsg.cells = `${msg.sheet}!J${msg.i+1}`\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 360,
        "wires": [
            [
                "38fc2152219e87a5",
                "7ea6110d6042fd38"
            ]
        ]
    },
    {
        "id": "ef10b6e0609460b2",
        "type": "inject",
        "z": "e4ab771e79673c52",
        "name": "Bookofmormoncentral.org",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "sheet",
                "v": "Bookofmormoncentral.org",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 120,
        "wires": [
            [
                "10fcc487f2582ab1"
            ]
        ]
    },
    {
        "id": "fb6a92d4575d8330",
        "type": "GSheet",
        "z": "e4ab771e79673c52",
        "creds": "0f9e4add1d4cec9d",
        "method": "get",
        "action": "",
        "sheet": "1xgPWcIGkOkfwtky8xch_2vKiaxbaLPAb9b2-biFk_4o",
        "cells": "",
        "flatten": false,
        "name": "",
        "x": 630,
        "y": 180,
        "wires": [
            [
                "3e4659ff770ecb44"
            ]
        ]
    },
    {
        "id": "38fc2152219e87a5",
        "type": "GSheet",
        "z": "e4ab771e79673c52",
        "creds": "0f9e4add1d4cec9d",
        "method": "update",
        "action": "",
        "sheet": "1xgPWcIGkOkfwtky8xch_2vKiaxbaLPAb9b2-biFk_4o-MBU",
        "cells": "",
        "flatten": false,
        "name": "",
        "x": 1210,
        "y": 400,
        "wires": [
            [
                "0b4ed50ea9ffd47e"
            ]
        ]
    },
    {
        "id": "6e6c5809518fd73b",
        "type": "function",
        "z": "e4ab771e79673c52",
        "name": "iterate the data array",
        "func": "msg.i = msg.i+1 || 0\n\nif (msg.i >= msg._cells.length){\n    //finish the process\n    msg.payload = 'END'\n    return [msg, null];\n}else{\n    //cell to check\n    msg.currentCell = msg._cells[msg.i]\n    \n    return [null, msg];\n}\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 220,
        "wires": [
            [
                "b72e6e0be0cac39d"
            ],
            [
                "8a63ae758c43f569"
            ]
        ]
    },
    {
        "id": "0b4ed50ea9ffd47e",
        "type": "delay",
        "z": "e4ab771e79673c52",
        "name": "",
        "pauseType": "delay",
        "timeout": "0.5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 810,
        "y": 460,
        "wires": [
            [
                "6e6c5809518fd73b"
            ]
        ]
    },
    {
        "id": "3e4659ff770ecb44",
        "type": "change",
        "z": "e4ab771e79673c52",
        "name": "_cells",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "_cells",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 180,
        "wires": [
            [
                "6e6c5809518fd73b"
            ]
        ]
    },
    {
        "id": "b72e6e0be0cac39d",
        "type": "debug",
        "z": "e4ab771e79673c52",
        "name": "END",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 200,
        "wires": []
    },
    {
        "id": "8a63ae758c43f569",
        "type": "function",
        "z": "e4ab771e79673c52",
        "name": "exist URL?",
        "func": "\nif(msg.currentCell.length > 0 && msg.i > 0 ){\n    //continue to check \n    msg.url = msg.currentCell[0]\n    return [null, msg];\n}else{\n    //empty cell, continue\n    return [msg, null];\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 300,
        "wires": [
            [
                "6e6c5809518fd73b"
            ],
            [
                "5b29122b7c6e65a0"
            ]
        ]
    },
    {
        "id": "5b29122b7c6e65a0",
        "type": "http request",
        "z": "e4ab771e79673c52",
        "name": "GET",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1070,
        "y": 320,
        "wires": [
            [
                "04223cee7f30d02a"
            ]
        ]
    },
    {
        "id": "2fa3faa1d59417e1",
        "type": "inject",
        "z": "e4ab771e79673c52",
        "name": "Scriptureplus.org",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "sheet",
                "v": "Scriptureplus.org",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 160,
        "wires": [
            [
                "10fcc487f2582ab1"
            ]
        ]
    },
    {
        "id": "10fcc487f2582ab1",
        "type": "function",
        "z": "e4ab771e79673c52",
        "name": "load",
        "func": "msg.cells = `${msg.sheet}!F:F`\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 180,
        "wires": [
            [
                "fb6a92d4575d8330"
            ]
        ]
    },
    {
        "id": "36494e90ae2cf8c3",
        "type": "inject",
        "z": "e4ab771e79673c52",
        "name": "Pearlofgreatpricecentral.com",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "sheet",
                "v": "Pearlofgreatpricecentral.com",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 200,
        "wires": [
            [
                "10fcc487f2582ab1"
            ]
        ]
    },
    {
        "id": "2462bb4fc112b2a9",
        "type": "inject",
        "z": "e4ab771e79673c52",
        "name": "Evidencecentral.org",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "sheet",
                "v": "Evidencecentral.org",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 240,
        "wires": [
            [
                "10fcc487f2582ab1"
            ]
        ]
    },
    {
        "id": "05c2970263b7b2a8",
        "type": "inject",
        "z": "e4ab771e79673c52",
        "name": "Biblecentral.info",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 280,
        "wires": [
            [
                "10fcc487f2582ab1"
            ]
        ]
    },
    {
        "id": "7ea6110d6042fd38",
        "type": "debug",
        "z": "e4ab771e79673c52",
        "name": "debug 9",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1240,
        "y": 300,
        "wires": []
    },
    {
        "id": "85dcc5a3cd86f146",
        "type": "inject",
        "z": "0f423dc7fc354cb4",
        "name": "evcEvidences",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "type",
                "v": "evc_evidences",
                "vt": "str"
            },
            {
                "p": "contentType",
                "v": "evidences",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 140,
        "wires": [
            [
                "aa6096f7b73a0abf"
            ]
        ]
    },
    {
        "id": "aa6096f7b73a0abf",
        "type": "function",
        "z": "0f423dc7fc354cb4",
        "name": "url",
        "func": "\nmsg.page = msg.page+1 || 0\nmsg.maxPage = msg.maxPage || 0\nmsg.typeData = msg.typeData || []\n\nif (msg.page >msg.maxPage){\n\n    return [msg, null]\n}else{\n    msg.url = `https://us-central1-scripturecentral-dev.cloudfunctions.net/scripturecore-api-dev/api/v1/references/${msg.type}?page=${msg.page}`\n\n    return [null, msg]\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 180,
        "wires": [
            [
                "7dc95af8d0f65e16"
            ],
            [
                "f48be67a65f8d727"
            ]
        ]
    },
    {
        "id": "f48be67a65f8d727",
        "type": "http request",
        "z": "0f423dc7fc354cb4",
        "name": "Get S+",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 460,
        "y": 200,
        "wires": [
            [
                "78186a095bca84ce"
            ]
        ]
    },
    {
        "id": "538ac6d888e45f17",
        "type": "delay",
        "z": "0f423dc7fc354cb4",
        "d": true,
        "name": "",
        "pauseType": "delay",
        "timeout": "0.5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 330,
        "y": 280,
        "wires": [
            [
                "aa6096f7b73a0abf"
            ]
        ]
    },
    {
        "id": "78186a095bca84ce",
        "type": "function",
        "z": "0f423dc7fc354cb4",
        "name": "prepareData",
        "func": "\n\nfor (let index = 0; index < msg.payload.data.length; index++) {\n    const element = msg.payload.data[index];\n    msg.typeData.push(element)\n}\n\nmsg.maxPage = msg.payload.pagination.totalPages-1\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 240,
        "wires": [
            [
                "538ac6d888e45f17"
            ]
        ]
    },
    {
        "id": "ff2183c6c902e320",
        "type": "function",
        "z": "0f423dc7fc354cb4",
        "name": "url knowhy",
        "func": "msg.url = `${env.get('STRAPI_URL')}/api/${msg.contentType}?filters[number][$eq]=${msg.currentTypeData.number}${msg.currentTypeData.locale? `&locale=${msg.currentTypeData.locale}`:\"\"}`\nmsg.headers = {\n    Authorization: env.get('STRAPI_API_KEY')\n}\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 220,
        "wires": [
            [
                "f26e45d9c9fa3e90",
                "919bfe6e9b22f0ee"
            ]
        ]
    },
    {
        "id": "f26e45d9c9fa3e90",
        "type": "http request",
        "z": "0f423dc7fc354cb4",
        "name": "getStrapi",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 860,
        "y": 280,
        "wires": [
            [
                "1146df7375648711",
                "75a92450b3daa30f",
                "155c17352467ccc0",
                "154748e827b1bfd8"
            ]
        ]
    },
    {
        "id": "7dc95af8d0f65e16",
        "type": "function",
        "z": "0f423dc7fc354cb4",
        "name": "function 1",
        "func": "\nmsg.i = msg.i+1 || 0\nmsg.currentTypeData = null\n\nif (msg.typeData.length < msg.i){\n    msg.payload = 'END'\n    return [msg, null]\n}else{\n    msg.currentTypeData = msg.typeData[msg.i]\n    return [null, msg]\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 180,
        "wires": [
            [
                "e51c23d2748ebdbc"
            ],
            [
                "ff2183c6c902e320"
            ]
        ]
    },
    {
        "id": "1146df7375648711",
        "type": "delay",
        "z": "0f423dc7fc354cb4",
        "d": true,
        "name": "",
        "pauseType": "delay",
        "timeout": "0.5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 590,
        "y": 360,
        "wires": [
            [
                "7dc95af8d0f65e16"
            ]
        ]
    },
    {
        "id": "e51c23d2748ebdbc",
        "type": "debug",
        "z": "0f423dc7fc354cb4",
        "name": "END",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "currenttypedata",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 120,
        "wires": []
    },
    {
        "id": "75a92450b3daa30f",
        "type": "function",
        "z": "0f423dc7fc354cb4",
        "d": true,
        "name": "update scripturePlus ID",
        "func": "const id = msg.payload.data[0].id\nconst updateUrl = `${env.get('STRAPI_URL')}/api/${msg.contentType}/${id}`;\nmsg.payload = {\n    \"data\": {\n    scripturePlusId: `${msg.currentTypeData.id}`\n    }\n};\nmsg.headers = {\n    Authorization: env.get('STRAPI_API_KEY'),\n    'Content-Type': 'application/json'\n};\n\nmsg.url = updateUrl;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 360,
        "wires": [
            [
                "03de2dc87fb3aff5"
            ]
        ]
    },
    {
        "id": "155c17352467ccc0",
        "type": "debug",
        "z": "0f423dc7fc354cb4",
        "name": "msg.currentTypeData",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "currentTypeData",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 220,
        "wires": []
    },
    {
        "id": "154748e827b1bfd8",
        "type": "debug",
        "z": "0f423dc7fc354cb4",
        "name": "StrapiElement",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 260,
        "wires": []
    },
    {
        "id": "1a6b6204b981acf3",
        "type": "debug",
        "z": "0f423dc7fc354cb4",
        "name": "Updated Id",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 320,
        "wires": []
    },
    {
        "id": "03de2dc87fb3aff5",
        "type": "http request",
        "z": "0f423dc7fc354cb4",
        "name": "",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1210,
        "y": 360,
        "wires": [
            [
                "1a6b6204b981acf3"
            ]
        ]
    },
    {
        "id": "9b858fb0890e96d4",
        "type": "inject",
        "z": "0f423dc7fc354cb4",
        "name": "Knowhy",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "type",
                "v": "scripture_knowhys",
                "vt": "str"
            },
            {
                "p": "contentType",
                "v": "knowhys",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 180,
        "wires": [
            [
                "aa6096f7b73a0abf"
            ]
        ]
    },
    {
        "id": "919bfe6e9b22f0ee",
        "type": "debug",
        "z": "0f423dc7fc354cb4",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "url",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 160,
        "wires": []
    },
    {
        "id": "b3da0c064b822b3b",
        "type": "function",
        "z": "0f423dc7fc354cb4",
        "name": "url",
        "func": "\nmsg.page = msg.page+1 || 0\nmsg.maxPage = msg.maxPage || 0\nmsg.typeData = msg.typeData || []\n\nif (msg.page >msg.maxPage){\n\n    return [msg, null]\n}else{\n    msg.url = `https://us-central1-scripturecentral-dev.cloudfunctions.net/scripturecore-api-dev/api/v1/references/${msg.type}&page=${msg.page}${(msg.locale != 'en') ? `&locale=${msg.locale}` : \"\"}`\n\n    return [null, msg]\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 520,
        "wires": [
            [
                "38041cb346a476e4"
            ],
            [
                "12c2dc4c9d8d6cd8"
            ]
        ]
    },
    {
        "id": "12c2dc4c9d8d6cd8",
        "type": "http request",
        "z": "0f423dc7fc354cb4",
        "name": "Get S+",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 500,
        "y": 540,
        "wires": [
            [
                "88fa4ee2c7c4da56",
                "41b75ff9f2d04806"
            ]
        ]
    },
    {
        "id": "94dcb04bc5cc0c3e",
        "type": "delay",
        "z": "0f423dc7fc354cb4",
        "d": true,
        "name": "",
        "pauseType": "delay",
        "timeout": "0.5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 370,
        "y": 620,
        "wires": [
            [
                "b3da0c064b822b3b"
            ]
        ]
    },
    {
        "id": "88fa4ee2c7c4da56",
        "type": "function",
        "z": "0f423dc7fc354cb4",
        "name": "prepareData",
        "func": "\n\nfor (let index = 0; index < msg.payload.data.length; index++) {\n    const element = msg.payload.data[index];\n    msg.typeData.push(element)\n}\n\nmsg.maxPage = msg.payload.pagination.totalPages-1\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 580,
        "wires": [
            [
                "94dcb04bc5cc0c3e"
            ]
        ]
    },
    {
        "id": "f11a3e157439ff4d",
        "type": "http request",
        "z": "0f423dc7fc354cb4",
        "name": "getStrapi",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 900,
        "y": 620,
        "wires": [
            [
                "8470507495197745",
                "c586ae27446c428b",
                "d10d6a519cfb7019",
                "47814a7efee53a8e"
            ]
        ]
    },
    {
        "id": "38041cb346a476e4",
        "type": "function",
        "z": "0f423dc7fc354cb4",
        "name": "function 2",
        "func": "\nmsg.i = msg.i+1 || 0\nmsg.currentTypeData = null\n\nif (msg.typeData.length < msg.i){\n    msg.payload = 'END'\n    return [msg, null]\n}else{\n    msg.currentTypeData = msg.typeData[msg.i]\n    return [null, msg]\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 520,
        "wires": [
            [
                "83fad2db0c85f6b8"
            ],
            [
                "7fc2171be6c25e18"
            ]
        ]
    },
    {
        "id": "8470507495197745",
        "type": "delay",
        "z": "0f423dc7fc354cb4",
        "d": true,
        "name": "",
        "pauseType": "delay",
        "timeout": "0.5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 630,
        "y": 700,
        "wires": [
            [
                "38041cb346a476e4"
            ]
        ]
    },
    {
        "id": "83fad2db0c85f6b8",
        "type": "debug",
        "z": "0f423dc7fc354cb4",
        "name": "END",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 480,
        "wires": []
    },
    {
        "id": "c586ae27446c428b",
        "type": "function",
        "z": "0f423dc7fc354cb4",
        "d": true,
        "name": "update scripturePlus ID",
        "func": "const id = msg.payload.data[0].id\nconst updateUrl = `${env.get('STRAPI_URL')}/api/${msg.contentType}/${id}`;\nmsg.payload = {\n    \"data\": {\n    scripturePlusId: `${msg.currentTypeData.id}`\n    }\n};\nmsg.headers = {\n    Authorization: env.get('STRAPI_API_KEY'),\n    'Content-Type': 'application/json'\n};\n\nmsg.url = updateUrl;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 700,
        "wires": [
            [
                "483d18c2101c2c09"
            ]
        ]
    },
    {
        "id": "d10d6a519cfb7019",
        "type": "debug",
        "z": "0f423dc7fc354cb4",
        "name": "msg.currentTypeData",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "currentTypeData",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 560,
        "wires": []
    },
    {
        "id": "47814a7efee53a8e",
        "type": "debug",
        "z": "0f423dc7fc354cb4",
        "name": "StrapiElement",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 600,
        "wires": []
    },
    {
        "id": "8cd98df6638b173b",
        "type": "debug",
        "z": "0f423dc7fc354cb4",
        "name": "Updated Id",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 660,
        "wires": []
    },
    {
        "id": "483d18c2101c2c09",
        "type": "http request",
        "z": "0f423dc7fc354cb4",
        "name": "",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1250,
        "y": 700,
        "wires": [
            [
                "8cd98df6638b173b"
            ]
        ]
    },
    {
        "id": "82e92b0bae20d2b6",
        "type": "inject",
        "z": "0f423dc7fc354cb4",
        "name": "Insights-en",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "type",
                "v": "pgpcinsights_posts",
                "vt": "str"
            },
            {
                "p": "contentType",
                "v": "insights",
                "vt": "str"
            },
            {
                "p": "locale",
                "v": "en",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 520,
        "wires": [
            [
                "b3da0c064b822b3b"
            ]
        ]
    },
    {
        "id": "7fc2171be6c25e18",
        "type": "function",
        "z": "0f423dc7fc354cb4",
        "name": "url title",
        "func": "msg.url = `${env.get('STRAPI_URL')}/api/${msg.contentType}?filters[title][$eq]=${msg.currentTypeData.title}${msg.locale ? `&locale=${msg.locale}` : \"\"}`\nmsg.headers = {\n    Authorization: env.get('STRAPI_API_KEY')\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 560,
        "wires": [
            [
                "f11a3e157439ff4d",
                "91d4bd8ce63558b5"
            ]
        ]
    },
    {
        "id": "91d4bd8ce63558b5",
        "type": "debug",
        "z": "0f423dc7fc354cb4",
        "name": "debug 5",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "url",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 500,
        "wires": []
    },
    {
        "id": "6b9b70e07670fb7b",
        "type": "inject",
        "z": "0f423dc7fc354cb4",
        "name": "Insights-es",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "type",
                "v": "pgpcinsights_posts",
                "vt": "str"
            },
            {
                "p": "contentType",
                "v": "insights",
                "vt": "str"
            },
            {
                "p": "locale",
                "v": "es",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 560,
        "wires": [
            [
                "b3da0c064b822b3b"
            ]
        ]
    },
    {
        "id": "fd6e552022ec1da8",
        "type": "inject",
        "z": "0f423dc7fc354cb4",
        "name": "q&a-en",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "type",
                "v": "scripture_notes?type=qa",
                "vt": "str"
            },
            {
                "p": "contentType",
                "v": "q-and-as",
                "vt": "str"
            },
            {
                "p": "locale",
                "v": "en",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 620,
        "wires": [
            [
                "b3da0c064b822b3b"
            ]
        ]
    },
    {
        "id": "1645e997d588010c",
        "type": "inject",
        "z": "0f423dc7fc354cb4",
        "name": "q&a-es",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "type",
                "v": "scripture_notes?type=qa",
                "vt": "str"
            },
            {
                "p": "contentType",
                "v": "q-and-as",
                "vt": "str"
            },
            {
                "p": "locale",
                "v": "es",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 660,
        "wires": [
            [
                "b3da0c064b822b3b"
            ]
        ]
    },
    {
        "id": "41b75ff9f2d04806",
        "type": "debug",
        "z": "0f423dc7fc354cb4",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 460,
        "wires": []
    },
    {
        "id": "d1eeed56bbf35017",
        "type": "function",
        "z": "8c069999c82e3d42",
        "name": "Prepare Content Types",
        "func": "// Define your content types\nmsg.contentTypes = [\n  \"arch-art-contests\",\n  \"arch-art-works\",\n  \"arch-audios\",\n  \"arch-blog-posts\",\n  \"arch-books\",\n  \"arch-book-chapters\",\n  \"arch-broadcasts\",\n  \"arch-charts\",\n  \"arch-conf-generals\",\n  \"arch-conf-papers\",\n  \"arch-conf-proceeds\",\n  \"arch-encyc-entries\",\n  \"arch-journals\",\n  \"arch-journal-articles\",\n  \"arch-journal-collections\",\n  \"arch-magazines\",\n  \"arch-magazine-artics\",\n  \"arch-manuals\",\n  \"arch-manual-lessons\",\n  \"arch-manuscripts\",\n  \"arch-maps\",\n  \"arch-musics\",\n  \"arch-newslet-articles\",\n  \"arch-newslet-collections\",\n  \"arch-newsletters\",\n  \"arch-newsp-articles\",\n  \"arch-photographies\",\n  \"arch-presentations\",\n  \"arch-reports\",\n  \"arch-theses\",\n  \"arch-videos\",\n  \"arch-web-articles\",\n  \"bios\",\n  \"blogs\",\n  \"commentaries\",\n  \"events\",\n  \"evidences\",\n  \"images\",\n  \"insights\",\n  \"knowhys\",\n  \"podcasts\",\n  \"q-and-as\",\n  \"quotes\",\n  \"rp-catalogs\",\n  \"rp-groups\",\n  \"rp-group-lists\",\n  \"rp-lessons\",\n  \"rp-plans\",\n  \"rp-plan-lists\",\n  \"rp-sponsors\",\n  \"scripture-speakers\",\n  \"scripture-videos\",\n  \"videos\",\n  \"youtube-videos\"\n]\nmsg.cells = `${msg.sheet}!A:A`\nmsg.row = 2\n\n\nreturn msg ;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 280,
        "wires": [
            [
                "e2fa5d956c2e2d2b"
            ]
        ]
    },
    {
        "id": "19ab894937dd9c6b",
        "type": "http request",
        "z": "8c069999c82e3d42",
        "name": "API Request",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 570,
        "y": 400,
        "wires": [
            [
                "958be3e6146b5fff"
            ]
        ]
    },
    {
        "id": "ae0016f892bef6b5",
        "type": "inject",
        "z": "8c069999c82e3d42",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "sheet",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 100,
        "wires": [
            [
                "d1eeed56bbf35017"
            ]
        ]
    },
    {
        "id": "e2fa5d956c2e2d2b",
        "type": "function",
        "z": "8c069999c82e3d42",
        "name": "url",
        "func": "\nmsg.i = msg.i+1 || 0\n\nif (msg.i >= msg.contentTypes.length){\n    msg.payload = 'END contentTypes'\n    return [msg, null]\n}else{\n    \n    msg.contentType = msg.contentTypes[msg.i] \n    msg.url = `${env.get('STRAPI_URL')}/api/${msg.contentType}${msg.locale ? `?locale=${msg.locale}` : \"\"}`\n    msg.headers = {\n        Authorization: env.get('STRAPI_API_KEY')\n     }\n    return [null, msg]\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 360,
        "wires": [
            [
                "8bf4388005a2242f"
            ],
            [
                "19ab894937dd9c6b"
            ]
        ]
    },
    {
        "id": "6237c1f08b4d0814",
        "type": "delay",
        "z": "8c069999c82e3d42",
        "d": true,
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 540,
        "y": 540,
        "wires": [
            [
                "e2fa5d956c2e2d2b"
            ]
        ]
    },
    {
        "id": "958be3e6146b5fff",
        "type": "function",
        "z": "8c069999c82e3d42",
        "name": "cheerio to check html",
        "func": "const cheerio = global.get(\"cheerio\")\n\nmsg.urls=[]\nmsg.e = 0\n\nfor (const iterator in msg.payload.data) {\n    \n    let currentObject = msg.payload.data[iterator]\n    msg.currentObject = msg.payload.data[iterator]\n    \n    for (const iterator of Object.keys(currentObject.attributes)) {\n        \n        const $ = cheerio.load(`${currentObject.attributes[iterator]}`);\n        \n        $('a').each(function(){\n            let url = {\n                id: currentObject.id,\n                type: \"a\",\n                attribute: iterator,\n                contentType: msg.contentType,\n                url: $(this).attr('href')\n            }\n            if (!msg.urls.includes(url)){\n                msg.urls.push(url)\n            }\n            \n        })\n         $('img').each(function(){\n            let url = {\n                    id: currentObject.id,\n                    type: \"img\",\n                    attribute: iterator,\n                    contentType: msg.contentType,\n                    url: $(this).attr('src')\n            }\n            if (!msg.urls.includes(url)){\n                msg.urls.push(url)\n            }\n            \n        })\n\n\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 400,
        "wires": [
            [
                "bccedca48a01234e"
            ]
        ]
    },
    {
        "id": "eeb84c4f08496624",
        "type": "delay",
        "z": "8c069999c82e3d42",
        "d": true,
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1460,
        "y": 280,
        "wires": [
            [
                "bccedca48a01234e"
            ]
        ]
    },
    {
        "id": "a85c32ff5c5c9e55",
        "type": "function",
        "z": "8c069999c82e3d42",
        "name": "result",
        "func": "// Extract properties from currentElement object\nvar id = msg.currentElement.id;\nvar type = msg.currentElement.type;\nvar attribute = msg.currentElement.attribute;\nvar contentType = msg.currentElement.contentType;\nvar url = msg.currentElement.url;\n\n// Prepare data array for Google Sheets\nmsg.payload = [[id, type, attribute, contentType, url, msg.statusCode]];\n\n// Define the range of cells to update\nmsg.cells = `${msg.sheet}!A${msg.row}:G${msg.row}`;\n\n// Increment the row for the next update\n\n\n// Return the modified message\nif (msg.statusCode != 200) { \n    msg.row = msg.row + 1;\n    return [null, msg]; \n}else{\n    return [msg, null]; \n}\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 480,
        "wires": [
            [
                "eeb84c4f08496624"
            ],
            [
                "acad7d629fce79d0",
                "165b57e44d1f48cd"
            ]
        ]
    },
    {
        "id": "76c8c6993666eb6b",
        "type": "http request",
        "z": "8c069999c82e3d42",
        "name": "GET",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1370,
        "y": 540,
        "wires": [
            [
                "a85c32ff5c5c9e55"
            ]
        ]
    },
    {
        "id": "bccedca48a01234e",
        "type": "function",
        "z": "8c069999c82e3d42",
        "name": "url exists?",
        "func": "\nif ( msg.e >= msg.urls.length) {\n    msg.payload = 'END GROUP'\n    return [msg, null];\n}else{\n    \n    //continue to check \n    msg.currentElement = msg.urls[msg.e]\n    msg.url = msg.currentElement.url\n    msg.e = msg.e + 1\n    return [null, msg];\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 400,
        "wires": [
            [
                "44340f415d24c25f",
                "6237c1f08b4d0814"
            ],
            [
                "8c018fcee8055650"
            ]
        ]
    },
    {
        "id": "acad7d629fce79d0",
        "type": "GSheet",
        "z": "8c069999c82e3d42",
        "creds": "0f9e4add1d4cec9d",
        "method": "update",
        "action": "",
        "sheet": "159yAheevemEx4lDBbq3FYfItNTeaoGJXWMvpdw0-MBU",
        "cells": "",
        "flatten": false,
        "name": "",
        "x": 1710,
        "y": 480,
        "wires": [
            [
                "eeb84c4f08496624"
            ]
        ]
    },
    {
        "id": "44340f415d24c25f",
        "type": "debug",
        "z": "8c069999c82e3d42",
        "name": "END GROUP",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 380,
        "wires": []
    },
    {
        "id": "8bf4388005a2242f",
        "type": "debug",
        "z": "8c069999c82e3d42",
        "name": "END content Types",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 320,
        "wires": []
    },
    {
        "id": "165b57e44d1f48cd",
        "type": "debug",
        "z": "8c069999c82e3d42",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "statusCode",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1600,
        "y": 600,
        "wires": []
    },
    {
        "id": "8c018fcee8055650",
        "type": "function",
        "z": "8c069999c82e3d42",
        "name": "isValid Url",
        "func": "\nconst isUrl = global.get(\"isUrl\")\n\nif (!isUrl(msg.url)){\n    msg.statusCode = 'XXX'\n    return [msg, null]\n}else{\n    return [null,msg]\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 480,
        "wires": [
            [
                "a85c32ff5c5c9e55"
            ],
            [
                "76c8c6993666eb6b",
                "01933573d726d50a"
            ]
        ]
    },
    {
        "id": "01933573d726d50a",
        "type": "debug",
        "z": "8c069999c82e3d42",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "url",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 580,
        "wires": []
    },
    {
        "id": "5cbf4f03ed496891",
        "type": "inject",
        "z": "6a5cdb3d473bbc8d",
        "name": "getAll Kw form Web (ES)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 160,
        "wires": [
            [
                "17833301ed116936"
            ]
        ]
    },
    {
        "id": "17833301ed116936",
        "type": "function",
        "z": "6a5cdb3d473bbc8d",
        "name": "getKnowhys",
        "func": "\nmsg.kwUrls = []\nmsg.url = 'https://centralldm.es/knowhys-results/?_sf_ppp=11000'\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 220,
        "wires": [
            [
                "baa81e292b96d712"
            ]
        ]
    },
    {
        "id": "baa81e292b96d712",
        "type": "http request",
        "z": "6a5cdb3d473bbc8d",
        "name": "GET",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 450,
        "y": 100,
        "wires": [
            [
                "3ae84979026c050f"
            ]
        ]
    },
    {
        "id": "3ae84979026c050f",
        "type": "function",
        "z": "6a5cdb3d473bbc8d",
        "name": "cheerio",
        "func": "const cheerio = global.get(\"cheerio\")\n\nconst $ = cheerio.load(msg.payload);\n\n$('.card_title a').each(function(){\n    msg.kwUrls.push($(this).attr('href'))\n})\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 140,
        "wires": [
            [
                "8757c2dbfda5594e"
            ]
        ]
    },
    {
        "id": "8757c2dbfda5594e",
        "type": "function",
        "z": "6a5cdb3d473bbc8d",
        "name": "iterate kw",
        "func": "msg.i = msg.i || 0\n\nif(msg.i >= msg.kwUrls.length){\n    \n    msg.payload = 'END_iterate_kw'\n   return [msg, null]\n\n}else{\n    let currentUrl = msg.kwUrls[msg.i]\n\n    msg.url = currentUrl\n\n    console.log(msg.i, msg.url)\n\n    msg.i++\n    return [null, msg]\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 140,
        "wires": [
            [],
            [
                "54a1b4b395dddc4b",
                "1c8d4a4f1305d58e"
            ]
        ]
    },
    {
        "id": "09762ac47135e4b9",
        "type": "delay",
        "z": "6a5cdb3d473bbc8d",
        "d": true,
        "name": "",
        "pauseType": "delay",
        "timeout": "0.100",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 610,
        "y": 260,
        "wires": [
            [
                "8757c2dbfda5594e"
            ]
        ]
    },
    {
        "id": "1c8d4a4f1305d58e",
        "type": "debug",
        "z": "6a5cdb3d473bbc8d",
        "name": "END",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "url",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 120,
        "wires": []
    },
    {
        "id": "54a1b4b395dddc4b",
        "type": "http request",
        "z": "6a5cdb3d473bbc8d",
        "d": true,
        "name": "GET Current KW",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 790,
        "y": 180,
        "wires": [
            [
                "c11d86ef7dc5a57e"
            ]
        ]
    },
    {
        "id": "770827e818e3e581",
        "type": "debug",
        "z": "6a5cdb3d473bbc8d",
        "name": "newFootnote",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "newFootnote",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 180,
        "wires": []
    },
    {
        "id": "c11d86ef7dc5a57e",
        "type": "function",
        "z": "6a5cdb3d473bbc8d",
        "d": true,
        "name": "corrected footnote",
        "func": "const cheerio = global.get(\"cheerio\");\n\nconst $ = cheerio.load(msg.payload);\nlet newFootnote = '<ul>';\n\n$('.footnotes').each(function () {\n    $(this).children().each(function () {\n        if ($(this).is('br')) {\n            return false; // Stop looping when encountering a <br> tag\n        }\n        newFootnote += `<li class=\"footnote\">${$(this).html()}</li>`;\n    });\n});\n\nnewFootnote += '</ul>';\nmsg.newFootnote = newFootnote;\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 200,
        "wires": [
            [
                "770827e818e3e581",
                "09762ac47135e4b9"
            ]
        ]
    },
    {
        "id": "2138dcc2b9970318",
        "type": "http request",
        "z": "ded3b8aa0b8e9043",
        "name": "Fetch API Data",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://api.scripturecentral.org/proxy/api/knowhys?populate=seo",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 468,
        "y": 20,
        "wires": [
            [
                "826f3dc89ef9ee64"
            ]
        ]
    },
    {
        "id": "826f3dc89ef9ee64",
        "type": "function",
        "z": "ded3b8aa0b8e9043",
        "name": "Check and Populate SEO",
        "func": "let data = msg.payload;\n\nif (Array.isArray(data)) {\n  data.forEach(item => {\n    let seo = item.attributes.seo || {}; // Extracted SEO fields from the API response\n    item.seo = {\n      metaTitle: seo.metaTitle || \"Default Title\", // Use extracted metaTitle or default value\n      metaDescription: seo.metaDescription || \"Default Description\", // Use extracted metaDescription or default value\n      keywords: seo.keywords || \"Default Keywords\", // Use extracted keywords or default value\n      metaAuthor: seo.metaAuthor || \"Default Author\" // Use extracted metaAuthor or default value\n    };\n  });\n}\n\nmsg.payload = data;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 728,
        "y": 20,
        "wires": [
            [
                "8f9a5ae0ab0d43d5"
            ]
        ]
    },
    {
        "id": "8f9a5ae0ab0d43d5",
        "type": "debug",
        "z": "ded3b8aa0b8e9043",
        "name": "seo",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 918,
        "y": 20,
        "wires": []
    },
    {
        "id": "23657c1816b7b1e2",
        "type": "inject",
        "z": "ded3b8aa0b8e9043",
        "name": "Start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 230,
        "y": 20,
        "wires": [
            [
                "2138dcc2b9970318"
            ]
        ]
    },
    {
        "id": "b4c4a7a2ea4d93a7",
        "type": "function",
        "z": "ded3b8aa0b8e9043",
        "name": "Prepare Content Types",
        "func": "msg.contentTypes = [\n  \"arch-reports\",\n  \"arch-musics\",\n  \"arch-art-contests\",\n  \"arch-art-works\",\n  \"arch-audios\",\n  \"arch-blog-posts\",\n  \"arch-books\",\n  \"arch-book-chapters\",\n  \"arch-broadcasts\",\n  \"arch-charts\",\n  \"arch-conf-generals\",\n  \"arch-conf-papers\",\n  \"arch-conf-proceeds\",\n  \"arch-encyc-entries\",\n  \"arch-journals\",\n  \"arch-journal-articles\",\n  \"arch-journal-collections\",\n  \"arch-magazines\",\n  \"arch-magazine-artics\",\n  \"arch-manuals\",\n  \"arch-manual-lessons\",\n  \"arch-manuscripts\",\n  \"arch-maps\",\n  \"arch-newslet-articles\",\n  \"arch-newslet-collections\",\n  \"arch-newsletters\",\n  \"arch-newsp-articles\",\n  \"arch-photographies\",\n  \"arch-presentations\",\n  \"arch-theses\",\n  \"arch-videos\",\n  \"arch-web-articles\",\n  \"bios\",\n  \"blogs\",\n  \"commentaries\",\n  \"events\",\n  \"evidences\",\n  \"images\",\n  \"insights\",\n  \"knowhys\",\n  \"podcasts\",\n  \"q-and-as\",\n  \"quotes\",\n  \"rp-catalogs\",\n  \"rp-groups\",\n  \"rp-group-lists\",\n  \"rp-lessons\",\n  \"rp-plans\",\n  \"rp-plan-lists\",\n  \"rp-sponsors\",\n  \"scripture-speakers\",\n  \"scripture-videos\",\n  \"videos\",\n  \"youtube-videos\"\n]\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 180,
        "wires": [
            [
                "e8d292e4535d2d89"
            ]
        ]
    },
    {
        "id": "e8d292e4535d2d89",
        "type": "function",
        "z": "ded3b8aa0b8e9043",
        "name": "url",
        "func": "\nmsg.i = msg.i+1 || 0\n\nif (msg.i >= msg.contentTypes.length){\n    msg.payload = 'END contentTypes'\n    return [msg, null]\n}else{\n    \n    msg.contentType = msg.contentTypes[msg.i] \n    msg.url = `${env.get('STRAPI_URL')}/api/${msg.contentType}?populate=seo${msg.locale ? `&locale=${msg.locale}` : \"\"}`\n    msg.headers = {\n        Authorization: env.get('STRAPI_API_KEY')\n     }\n    return [null, msg]\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 220,
        "wires": [
            [
                "1f417a28648262cd"
            ],
            [
                "6c0734696aa75ae9"
            ]
        ]
    },
    {
        "id": "6c0734696aa75ae9",
        "type": "http request",
        "z": "ded3b8aa0b8e9043",
        "name": "Get S+",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 540,
        "y": 220,
        "wires": [
            [
                "ab4baa20affd7cd3",
                "d1dc4a118707318b",
                "a59f4f095584555a"
            ]
        ]
    },
    {
        "id": "ab4baa20affd7cd3",
        "type": "delay",
        "z": "ded3b8aa0b8e9043",
        "d": true,
        "name": "",
        "pauseType": "delay",
        "timeout": "0.5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 390,
        "y": 340,
        "wires": [
            [
                "e8d292e4535d2d89"
            ]
        ]
    },
    {
        "id": "268c93173064300d",
        "type": "function",
        "z": "ded3b8aa0b8e9043",
        "name": "iterate elements ",
        "func": "\nmsg.b = msg.b+1 || 0\nmsg.currentTypeData = null\n\nif (msg.allData.length < msg.b){\n    msg.payload = 'END'\n    return [msg, null]\n}else{\n    msg.currentTypeData = msg.allData[msg.b]\n    return [null, msg]\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 260,
        "wires": [
            [
                "44cdbab53db31397"
            ],
            [
                "232918ba20280d73",
                "19ba48854a27ee1b",
                "caaac8a96ef59dc3"
            ]
        ]
    },
    {
        "id": "19ba48854a27ee1b",
        "type": "delay",
        "z": "ded3b8aa0b8e9043",
        "name": "",
        "pauseType": "delay",
        "timeout": "0.5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 730,
        "y": 360,
        "wires": [
            [
                "268c93173064300d"
            ]
        ]
    },
    {
        "id": "44cdbab53db31397",
        "type": "debug",
        "z": "ded3b8aa0b8e9043",
        "name": "END",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "currenttypedata",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 100,
        "wires": []
    },
    {
        "id": "caaac8a96ef59dc3",
        "type": "function",
        "z": "ded3b8aa0b8e9043",
        "name": "Check SEO",
        "func": "const id = msg.currentTypeData.id;\nconst updateUrl = `${env.get('STRAPI_URL')}/api/${msg.contentType}/${id}}`;\n\n// Extract SEO fields from the response data\nlet seo = msg.currentTypeData.attributes.seo || {}; // Extracted SEO fields from the API response\n\n// Populate the payload with the SEO fields\nmsg.payload = {\n    data: {   \n        seo: {\n            metaTitle: seo.metaTitle || msg.currentTypeData.attributes.title || \" \", \n            metaDescription: seo.metaDescription || msg.currentTypeData.attributes.summary || msg.currentTypeData.attributes.title || \" \",\n            //keywords: seo.keywords || \"Default Keywords\",\n            //metaAuthor: seo.metaAuthor || \"Default Author\"\n        }\n    }\n};\n\nmsg.headers = {\n    Authorization: env.get('STRAPI_API_KEY'),\n    'Content-Type': 'application/json'\n};\n\nmsg.url = updateUrl;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 260,
        "wires": [
            [
                "2dd36119c1db7ba7",
                "eb80e112811af9dc"
            ]
        ]
    },
    {
        "id": "52ea3b3bc9d5cc1f",
        "type": "inject",
        "z": "ded3b8aa0b8e9043",
        "name": "EN",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "contentType",
                "v": "contentType",
                "vt": "str"
            },
            {
                "p": "locale",
                "v": "en",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 70,
        "y": 140,
        "wires": [
            [
                "b4c4a7a2ea4d93a7"
            ]
        ]
    },
    {
        "id": "1f417a28648262cd",
        "type": "debug",
        "z": "ded3b8aa0b8e9043",
        "name": "END content Types",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 160,
        "wires": []
    },
    {
        "id": "5d1d5f1bc0c49d2f",
        "type": "inject",
        "z": "ded3b8aa0b8e9043",
        "name": "ES",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "contentType",
                "v": "contentType",
                "vt": "str"
            },
            {
                "p": "locale",
                "v": "es",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 70,
        "y": 180,
        "wires": [
            [
                "b4c4a7a2ea4d93a7"
            ]
        ]
    },
    {
        "id": "9f076867703fe8b0",
        "type": "inject",
        "z": "ded3b8aa0b8e9043",
        "name": "PT",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "contentType",
                "v": "contentType",
                "vt": "str"
            },
            {
                "p": "locale",
                "v": "pt",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 70,
        "y": 220,
        "wires": [
            [
                "b4c4a7a2ea4d93a7"
            ]
        ]
    },
    {
        "id": "d1dc4a118707318b",
        "type": "debug",
        "z": "ded3b8aa0b8e9043",
        "name": "debug 22",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 180,
        "wires": []
    },
    {
        "id": "a59f4f095584555a",
        "type": "function",
        "z": "ded3b8aa0b8e9043",
        "name": "function 3",
        "func": "msg.allData = msg.payload.data\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 220,
        "wires": [
            [
                "268c93173064300d"
            ]
        ]
    },
    {
        "id": "232918ba20280d73",
        "type": "debug",
        "z": "ded3b8aa0b8e9043",
        "name": "debug 23",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "currentTypeData",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 200,
        "wires": []
    },
    {
        "id": "2dd36119c1db7ba7",
        "type": "debug",
        "z": "ded3b8aa0b8e9043",
        "name": "debug 24",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 220,
        "wires": []
    },
    {
        "id": "eb80e112811af9dc",
        "type": "http request",
        "z": "ded3b8aa0b8e9043",
        "name": "",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1100,
        "y": 300,
        "wires": [
            [
                "74ea2b2f1ebaed8c"
            ]
        ]
    },
    {
        "id": "74ea2b2f1ebaed8c",
        "type": "debug",
        "z": "ded3b8aa0b8e9043",
        "name": "debug 25",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1240,
        "y": 260,
        "wires": []
    }
]